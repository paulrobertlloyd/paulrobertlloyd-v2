HTTPS + Compression Considered Harmful?
=======================================

  By Paul Robert Lloyd
  <https://v2.paulrobertlloyd.com/2015/05/https_compression>
  Sunday, 3 May 2015

As I get closer to launching my redesigned website (this side of Christmas would be nice), I wanted to ensure pages were served over <abbr title="HTTP Secure">HTTPS</abbr>. This reflects a broader community effort to make the web more secure and trustworthy, a move [encouraged by the <abbr title="World Wide Web Consortium">W3C</abbr>][1].

Enabling <abbr>HTTPS</abbr> wasn't too difficult, largely thanks to [Josh's excellent how-to guide][2]. He recommends getting a free certificate from [StartSSL][3], but as I have sub-domains for different staging and image resizing servers, I bought a [wildcard certificate from NameCheap][4] instead. The launch of [Let's Encrypt][5] later this year should hopefully make this exercise easier and better yet, free.

## An unexpected consequence of enabling <abbr>HTTPS</abbr>
With my certificates installed and <abbr>HTTPS</abbr> enabled, I visited my site and smiled broadly as I saw a little lock icon next to my domain. Ah, such simple pleasures.

One reason for enabling <abbr>HTTPS</abbr> was to examine its impact on performance, so I submitted my newly secured site to [Google's Page Insights][6] tool. Expecting a 100% score for speed as I had before, I instead got a value in the low 90% range. [Enabling compression][7] would reduce the response size of my static assets, I was told. But wait, I _had_ enabled compression. Why was this setting not being respected?

I eventually realised this was a server related issue<sup id="fnref:1"><a href="#fn:1">1</a></sup>, yet my original line of enquiry had me believe compression was disabled because using both <abbr title="Secure Sockets Layer">SSL</abbr><sup id="fnref:2"><a href="#fn:2">2</a></sup> and <abbr>HTTP</abbr> compression could make a site vulnerable to the [<abbr title="Browser Reconnaissance and Exfiltration via Adaptive Compression of Hypertext">BREACH</abbr>][8] attack. This was the first time I had heard about such an exploit, which I find surprising given that it can occur when authors follow two sets of best practice. More precisely, a site is vulnerable to this attack when pages:

* Are served from a server that uses <abbr title="Hypertext Transfer Protocol">HTTP</abbr>-level compression
* Reflect user-input in <abbr>HTTP</abbr> response bodies
* Reflect a secret (such as a <abbr>CSRF</abbr> token) in <abbr>HTTP</abbr> response bodies

Any discussion about encryption usually leaves me confused and befuddled (the shear number of abbreviations doesn't help), but the <abbr>BREACH</abbr> team suggest a number of ways to [mitigate against an attack][9]. Ordered by effectiveness, it's worth noting that their first suggestion is to simply disable <abbr>HTTP</abbr> compression. Given the impact this can have on performance, that's quite concerning.

My new website serves only static resources (pages are generated using [Jekyll][10] on my local machine), does not submit any form data (my contact form uses [Formspree][11], a third-party service), and does not transmit any sensitive data. Therefore I believe it's safe for me to continue using compression. However, if you have a website that posts sensitive data (perhaps you have a secure admin area), you may wish to investigate this issue further.

In the meantime, perhaps there needs to be a discussion about which approaches will help us build websites that are both secure _and_ fast.

* * *

<div class="footnotes">
    <ol>
        <li id="fn:1">
            <p>I originally thought I wasn't able to override this behaviour because requests to my custom-configured nginx instance are proxied via WebFaction's <a href="http://docs.webfaction.com/user-guide/websites.html#creating-a-website">own front-end nginx process</a>. After considerable head scratching, I realised several conflicting nginx processes were running. Quitting these and starting a new single process fixed the issue. <a href="#fnref:1">&#8617;</a></p>
        </li>
        <li id="fn:2">
            <p>Compression has to be <a href="http://nginx.com/resources/admin-guide/compression-and-decompression/">enabled in nginx</a> regardless of protocol. <a href="#fnref:2">&#8617;</a></p>
        </li>
    </ol>
</div>

[1]: http://w3ctag.github.io/web-https/
[2]: https://www.joshemerson.co.uk/blog/secure-your-site
[3]: https://www.startssl.com/
[4]: https://www.namecheap.com/security/ssl-certificates/wildcard.aspx
[5]: https://letsencrypt.org
[6]: https://developers.google.com/speed/pagespeed/insights/
[7]: https://developers.google.com/speed/docs/insights/EnableCompression
[8]: https://en.wikipedia.org/wiki/BREACH_(security_exploit)
[9]: http://breachattack.com/#mitigations
[10]: http://jekyllrb.com
[11]: https://formspree.io
[12]: http://docs.webfaction.com/user-guide/websites.html#creating-a-website
[13]: http://nginx.com/resources/admin-guide/compression-and-decompression/

